<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD39/cA9vb2GPX19TL19fUC9vb2Bfj4+BH39/cH+Pj4Evb2
        9hX4+PgQ9/f3D/X19Rv39/caAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPLy8gDy8vIt8/PzhvT09Ezz8/Na9vb2ZvLy
        8m/z8/OA8/PznvDw8IHz8/OK7u7uqerq6pcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD6+voA1tbWAPX19VXw8PB88vLygfT0
        9Ff39/dP8fHxgfHx8Xrz8/Or8vLynvLy8qnv7++s5+fnpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP///wD///8A////C+3p4irSwq88tZp+N8Otljrk2881+Pn3Fc7PwwC8vLwA9PT0QPDw
        8Gn09PSL+Pj4Kff39zDz8/Nb8fHxRfT09FTz8/Oc9PT0WPDw8Fjw8PBzAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP///wDs5t8A8+/uGceuk1arh1+zmGs64JFeJ/WHUBbxi1Yc85VlMe+dckXAuJh1c+DW
        yyj///8H9PT0KPf39yX7+/sD8fHxAPX19Q/09PQH+/v7Bfj4+Bv5+fkF9/f3Dvr6+hUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD///8AaDAAAN/Uxz2siGG4lWUy+ZpsOv+lfFH/rYde9bKOZfCqhl36onhL+JFf
        KPyHUBP8n3NF4c+9qIH9//8L7+7nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////AP///wHOuqRFp4BX2KJ6T/ypg1r6ondJ/5hpNv+RYS38kWAr+5Jh
        Lfubbj32sI1m97eYdvmcbz/8lmc19b6kiZX5/P0V8O7qAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wBMCAAA3dHDQbCPbtephV7/nHFD/ptuPvuqhFr7sZBq+LaV
        cf25mHb/uZt5/7GOZ/yYajf3k2Mv/a+NaPrDqo73xrGave3r5jf///8B////AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5N7XAPPz8RHGsJm2rIlk/550R/+siWL/onhM/Y5Z
        H/yESwz/h04N/otTE/2PWx7/mms0/K+NZvK5nHvzmWs6/4xXHf6VZTHopn9UxdrNvkPCqI4A/P//AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC9rZkA6+jgbLmegfiie1H5pH1S/YdP
        FP98PwD/jVge/aF7Zv+bfJj9i2qm+Jh5pP+ffX7/lmk7/JdpNP2/o4b/u6CA5J1yQ+WRYCv7up1/ov//
        /wX2/PoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///7AAAAAADRv6qTqoVe9ptu
        P/h+QwT/f0MD/51zT/+LbrT4VzPL/kggy/lPKM72SyTN900mzP5xUsX4oH55/YlTF/+VZDDtu59/2sCo
        jJHRwa5v+vn3HPbz7gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD09O8A9vbxFr+k
        h86ieEz/fkIC/n1BAP+bck//elzH/0ojyv9/ZdbFnYjgWLal5j2gjOBBjnfajWJB0PdYNMv9lnN+6YJI
        Cv59QQD+hEsN9pprOPfJs5lmtZRwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANrP
        wADf1skeup+A4YZOEv99QAD/jFgd/49xs/9IH8n5rZ3i376x5sHBtelSGgCvAOPd9R+2p+aJr57k7V8+
        zf6NdtTsr4xm5I9cIN+PXCHfkmEn4ayKYFyYbTsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA4t3SAOfm3h6gd0nhfUAA/31AAP+gemL/XDrN/4Bm2L66reeFRRzF/Xlc1bz///8Hz8fugFIt
        yf82CML/dFfT/MK26dOwn9+8sZ/Xs7ip2aWrmNa0qJbco8C0546oluCUoo7el6iY3lb///8C/f79AAAA
        AAAAAAAAAAAAAAAAAADby7cA18WxHpBdJeF9QQD/gkcE/55/lv9LJsv2oY7gU7ap5jlIIMf2YD3O2v//
        /xmtnOSUQhfF/1Muyv9YNMv/ZEPP/04oyP9SLcv/bk/S/UoiyP9QKsr8dVjT/08qyP9ZNcv6hWvWvf//
        /yL9/P0AAAAAAAAAAAAAAAAAAAAAANrKtwDXxrQbkF0m231BAP+GTQr/kXGo/lg00fXMwu874t/xKlg0
        y+ZQKcnp5+X0NX9j1ptBFsX/jnfb/UsmyP9mR9D/e2DV/2lK0f9sTdL/ZEPO/3tg1PlgQM7/XDzL/52K
        3eyij96T3tbxItzV8AAAAAAAAAAAAAAAAAAAAAAA9vXyAP7//xymflHdfUAA/4VLCP+UdaL4Ui7O87mr
        5z3///8DRhzHok0kyf/Wzu93cVPTykkgyP/FuerwclTS9I532/JgPs3yXz3P8ox23PJoSM/zXzzL9npf
        1fR9YtXzYD7L93VZ0e29suY9uazlAAAAAAAAAAAAAAAAAAAAAAD8//wA////BrqceaCCSAn/f0QA/6CA
        g/9PKcz9pJDhkf///wJuTdKWQRXG/8G168FiP87rTifJ6d/a81Xe2vBprJzmqMe72qjFr5iowqySqtTH
        vo3g3fVD4N3xPOLg8Tvd2fE/39vyPenn9hDo5vUAAAAAAAAAAAAAAAAAAAAAAAAAAADFrZMA3dDBSJhp
        N/F8PwD/lmg89GdGx/NoSdHo49/yP5yH4I09EcX/ppTj+lQtzP9pR9Hg/v/7NY532rFOJ837ooOQ/IRL
        CP2LVBn/x62RkP///wH9/P4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPr5
        +AD///8HvqKFk4dPFP6CRwb9m3uN+Uwmy/93WtPaxLnr1EYcx/5xUtL8QRXF/5N93vWnleK5RBvJ9YVo
        v/qUYzD7fUEB/6yJY+Hw7egu4NfLAP7//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAOvm3QD19PApuZx6zIRLD/+OWiL/m3+l/1MuzP1OKMr3Og3C/kEWxv81BsH/TyrJ/00m
        y/+CZsH/m3JQ/35DAv+abj3p3NDBYv///wP+//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////AL+wlwDw7+ozvKGBxYpUGPmKVBf/nXp19IJku/lJH8T/LwDA/zYH
        wv9tTMX/nH+g/5doOP+BRwj/nnRG3NXHtl////8C/v7+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AP///wH6+vcXy7adiKJ5TOiKVRj8kl8j/mAy
        d/8uAMP/QBCp/4xcPv+MVhj+lGMu8LaXdq3azL0q////BP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wD///8M6uPbKsu2
        nXish1eadUqB1DEBwv9VK677p4Feu76khZDg1MdM////Ee3q5gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA////AAAAHgCijuGOOQvD/3VX1N3///4h+vn6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAYkXSAJ+O31NKIsj0h27ZsP///wv8/fkAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACzqdwAuK/dEHxk1D6jkeMlAACMAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////8AD///AA///wAP/AMAD/gACA/wAD//wAAf/8AAD/+AAA//gA
        AH/4AAB/8AAAf/ACAH/wAAAD8AAAA/AAAAPwAAAD8AAAA/gAAH/4AAD//AAA//4AAf/+AAP//4AP///4
        f///+H////j///////////////////////8=
</value>
  </data>
</root>